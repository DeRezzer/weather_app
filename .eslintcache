[{"/home/escoto/weather_app/src/index.js":"1","/home/escoto/weather_app/src/App.js":"2","/home/escoto/weather_app/src/weather.js":"3","/home/escoto/weather_app/src/components/spinner.js":"4"},{"size":290,"mtime":1616200554901,"results":"5","hashOfConfig":"6"},{"size":507,"mtime":1616209590699,"results":"7","hashOfConfig":"6"},{"size":5418,"mtime":1616231686609,"results":"8","hashOfConfig":"6"},{"size":678,"mtime":1616200554901,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"jeofjw",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/escoto/weather_app/src/index.js",[],["20","21"],"/home/escoto/weather_app/src/App.js",[],"/home/escoto/weather_app/src/weather.js",["22"],"/** @jsxImportSource @emotion/react */\nimport { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport fetch from 'isomorphic-unfetch';\nimport dateFormat from 'dateformat';\n\nimport { css } from '@emotion/react';\n\nimport Spinner from './components/spinner';\n\n\n\n//component for the date\nfunction WDate(props){\n\n  const weirdTime = props.date;\n\n  // let saneTime = new Date(0);\n  //\n  // saneTime.setUTCSeconds(weirdTime);\n  //console.log(\"== result of weirdTime var\", weirdTime);\n  //let uts = props.date;\n\n  const date = new Date(weirdTime*1000);\n  const formattedDate = dateFormat(date, \"ddd mmm d h:MM:ss TT Z\");\n\n  console.log(\" == this is our time object: \", formattedDate);\n\n  const styles = css `\n      background-color: lavenderblush;\n      color: mediumvioletred;\n      margin: 0;\n      padding: 10px;\n  `;\n\n    return (\n        <div>\n            <h1 css={styles}>Date: {formattedDate}</h1>\n        </div>\n    );\n}\n\n//<Temp temp={data}/>\n\n//component for temperatures\nfunction Temp(props){\n    return (\n        <div>\n            <h2>Temp: {props.temp.temp} {\"\\xB0\"}F</h2>\n            <h2>Feels Like: {props.temp.feels_like} {\"\\xB0\"}F</h2>\n            <h2>Min: {props.temp.temp_min} {\"\\xB0\"}F</h2>\n            <h2>Max: {props.temp.temp_max} {\"\\xB0\"}F</h2>\n        </div>\n    );\n}\n\n//component for probability of precipitation\nfunction Pop(props){\n    return (\n        <div>\n            <h3>Probability of precipitation: {Math.trunc(props.pop*100)}%</h3>\n        </div>\n    );\n}\n\n//component for weather description and associated icon\nfunction Description(props){\n\n  const styles = css `\n\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n  `;\n\n    return (\n        <div>\n            <h3>Description: {props.description.description}</h3>\n          <div>\n            <img css={styles} alt={\"whut\"} src={\"http://openweathermap.org/img/wn/\" + props.description.icon + \"@2x.png\"} />\n          </div>\n        </div>\n    );\n}\n\n\n//main card component for: Date Temp Pop and Description components\nfunction Card(props){\n\n  const styles = css `\n    position: relative;\n    background-color: lightgrey;\n    justify-content: center;\n  `;\n\n    return (\n        <div css={styles}>\n            <WDate date={props.time}/>\n            <Temp temp={props.temperature}/>\n            <Pop pop={props.prec}/>\n            <Description description={props.desc}/>\n        </div>\n    )\n}\n\n/* the card for each 3 hour weather update should look something like this..... I HOPE!! xD\n<Card\n    time={data.dt_txt}\n    temperature={data.main}\n    prec={data.pop}\n    desc={data.weather[0]}\n/>\n*/\n\nfunction FetchForcast({query}){\n    const [ inputQuery, setInputQuery ] = useState(query || \"\");\n    const [ forcasts, setForcasts ] = useState([]);\n    const [ isLoading, setIsLoading ] = useState(false);\n    const history = useHistory();\n\n    const styles = css `\n      list-style: none;\n      display: flex;\n      width: 500px;\n    `;\n\n    const container = css `\n      width: 100%;\n      overflow: hidden;\n      overflow-x: scroll\n    `;\n\n    const containerItem = css `\n      min-width: 360px;\n      padding: 10px;\n    `;\n\n\n    const navBar = css  `\n      color: blue;\n      text-align: center;\n    `;\n\n    useEffect(() => {\n        let ignore = false;\n        const controller = new AbortController();\n        async function weather(){\n            let responseBody = {};\n            setIsLoading(true);\n            try {\n                const res = await fetch(\n                    `http://api.openweathermap.org/data/2.5/forecast?q=${inputQuery}&appid=bfb15fd71078ef4d76b0d6f45ac18275&units=imperial`,\n                    { signal: controller.signal }\n                );\n                responseBody = await res.json();\n            } catch (e) {\n                if (e instanceof DOMException){\n                    console.log(\"HTTP request aborted!\");\n                } else {\n                    throw e;\n                }\n            }\n\n            if (!ignore){\n                setForcasts(responseBody.list || []);\n                setIsLoading(false);\n                console.log(\"== Forcasts: \", responseBody.list);\n            }\n        }\n        weather();\n        return () => {\n            controller.abort();\n            ignore = true;\n        };\n    }, [ query ]);\n\n    return(\n        <div>\n          <div css={navBar}>\n            <form onSubmit={(e) => {\n                e.preventDefault();\n                history.push(`?q=${inputQuery}`);\n            }}>\n                <input placeholder=\"Enter city\" value={inputQuery} onChange={e => setInputQuery(e.target.value)}/>\n                <button type=\"submit\">Search City</button>\n            </form>\n            <h2>Displaying Weather for: {query}</h2>\n          </div>\n            { isLoading ? (\n                <Spinner />\n            ): (\n              <div css={container}>\n                <ul css={styles}>\n                {forcasts.map(data => (\n                    <li css={containerItem} key={data.dt}>\n                        <Card\n                            time={data.dt}\n                            temperature={data.main}\n                            prec={data.pop}\n                            desc={data.weather[0]}\n                        />\n                    </li>\n                    ))}\n                </ul>\n              </div>\n            )}\n        </div>\n    );\n}\n\nexport default FetchForcast;\n","/home/escoto/weather_app/src/components/spinner.js",[],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":175,"column":8,"nodeType":"29","endLine":175,"endColumn":17,"suggestions":"30"},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'inputQuery'. Either include it or remove the dependency array.","ArrayExpression",["33"],"no-global-assign","no-unsafe-negation",{"desc":"34","fix":"35"},"Update the dependencies array to be: [inputQuery, query]",{"range":"36","text":"37"},[4296,4305],"[inputQuery, query]"]