{"version":3,"sources":["components/spinner.js","weather.js","App.js","index.js"],"names":["Spinner","size","color","class","WDate","props","weirdTime","date","Date","formattedDate","dateFormat","console","log","styles","css","Temp","temp","feels_like","temp_min","temp_max","Pop","Math","trunc","pop","Description","description","alt","src","icon","Card","time","temperature","prec","desc","FetchForcast","query","useState","inputQuery","setInputQuery","forcasts","setForcasts","isLoading","setIsLoading","history","useHistory","container","containerItem","navBar","useEffect","ignore","controller","AbortController","a","responseBody","fetch","signal","res","json","DOMException","list","weather","abort","onSubmit","e","preventDefault","push","placeholder","value","onChange","target","type","map","data","dt","main","App","queryString","parse","useLocation","search","q","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7b3d772.chunk.js","sourcesContent":["import React from 'react';\nimport './spinner.css';\n\nfunction Spinner({ size, color }) {\n    size = size || 12;\n    color = color || '#333';\n\n    return (\n        <div class=\"sk-cube-grid\">\n            <div class=\"sk-cube sk-cube1\"></div>\n            <div class=\"sk-cube sk-cube2\"></div>\n            <div class=\"sk-cube sk-cube3\"></div>\n            <div class=\"sk-cube sk-cube4\"></div>\n            <div class=\"sk-cube sk-cube5\"></div>\n            <div class=\"sk-cube sk-cube6\"></div>\n            <div class=\"sk-cube sk-cube7\"></div>\n            <div class=\"sk-cube sk-cube8\"></div>\n            <div class=\"sk-cube sk-cube9\"></div>\n        </div>\n    );\n}\n\nexport default Spinner;","/** @jsxImportSource @emotion/react */\nimport { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport fetch from 'isomorphic-unfetch';\nimport dateFormat from 'dateformat';\n\nimport { css } from '@emotion/react';\n\nimport Spinner from './components/spinner';\n\n\n\n//component for the date\nfunction WDate(props){\n\n  const weirdTime = props.date;\n\n  // let saneTime = new Date(0);\n  //\n  // saneTime.setUTCSeconds(weirdTime);\n  //console.log(\"== result of weirdTime var\", weirdTime);\n  //let uts = props.date;\n\n  const date = new Date(weirdTime*1000);\n  const formattedDate = dateFormat(date, \"ddd mmm d h:MM:ss TT Z\");\n\n  console.log(\" == this is our time object: \", formattedDate);\n\n  const styles = css `\n      background-color: lavenderblush;\n      color: mediumvioletred;\n      margin: 0;\n      padding: 10px;\n  `;\n\n    return (\n        <div>\n            <h1 css={styles}>Date: {formattedDate}</h1>\n        </div>\n    );\n}\n\n//<Temp temp={data}/>\n\n//component for temperatures\nfunction Temp(props){\n    return (\n        <div>\n            <h2>Temp: {props.temp.temp} {\"\\xB0\"}F</h2>\n            <h2>Feels Like: {props.temp.feels_like} {\"\\xB0\"}F</h2>\n            <h2>Min: {props.temp.temp_min} {\"\\xB0\"}F</h2>\n            <h2>Max: {props.temp.temp_max} {\"\\xB0\"}F</h2>\n        </div>\n    );\n}\n\n//component for probability of precipitation\nfunction Pop(props){\n    return (\n        <div>\n            <h3>Probability of precipitation: {Math.trunc(props.pop*100)}%</h3>\n        </div>\n    );\n}\n\n//component for weather description and associated icon\nfunction Description(props){\n\n  const styles = css `\n\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n  `;\n\n    return (\n        <div>\n            <h3>Description: {props.description.description}</h3>\n          <div>\n            <img css={styles} alt={\"whut\"} src={\"https://openweathermap.org/img/wn/\" + props.description.icon + \"@2x.png\"} />\n          </div>\n        </div>\n    );\n}\n\n\n//main card component for: Date Temp Pop and Description components\nfunction Card(props){\n\n  const styles = css `\n    position: relative;\n    background-color: lightgrey;\n    justify-content: center;\n  `;\n\n    return (\n        <div css={styles}>\n            <WDate date={props.time}/>\n            <Temp temp={props.temperature}/>\n            <Pop pop={props.prec}/>\n            <Description description={props.desc}/>\n        </div>\n    )\n}\n\n/* the card for each 3 hour weather update should look something like this..... I HOPE!! xD\n<Card\n    time={data.dt_txt}\n    temperature={data.main}\n    prec={data.pop}\n    desc={data.weather[0]}\n/>\n*/\n\nfunction FetchForcast({query}){\n    const [ inputQuery, setInputQuery ] = useState(query || \"\");\n    const [ forcasts, setForcasts ] = useState([]);\n    const [ isLoading, setIsLoading ] = useState(false);\n    const history = useHistory();\n\n    const styles = css `\n      list-style: none;\n      display: flex;\n      width: 500px;\n    `;\n\n    const container = css `\n      width: 100%;\n      overflow: hidden;\n      overflow-x: scroll\n    `;\n\n    const containerItem = css `\n      min-width: 360px;\n      padding: 10px;\n    `;\n\n\n    const navBar = css  `\n      color: blue;\n      text-align: center;\n    `;\n\n    useEffect(() => {\n        let ignore = false;\n        const controller = new AbortController();\n        async function weather(){\n            let responseBody = {};\n            setIsLoading(true);\n            try {\n                const res = await fetch(\n                    `https://api.openweathermap.org/data/2.5/forecast?q=${inputQuery}&appid=bfb15fd71078ef4d76b0d6f45ac18275&units=imperial`,\n                    { signal: controller.signal }\n                );\n                responseBody = await res.json();\n            } catch (e) {\n                if (e instanceof DOMException){\n                    console.log(\"HTTP request aborted!\");\n                } else {\n                    throw e;\n                }\n            }\n\n            if (!ignore){\n                setForcasts(responseBody.list || []);\n                setIsLoading(false);\n                console.log(\"== Forcasts: \", responseBody.list);\n            }\n        }\n        weather();\n        return () => {\n            controller.abort();\n            ignore = true;\n        };\n    }, [ query ]);\n\n    return(\n        <div>\n          <div css={navBar}>\n            <form onSubmit={(e) => {\n                e.preventDefault();\n                history.push(`?q=${inputQuery}`);\n            }}>\n                <input placeholder=\"Enter city\" value={inputQuery} onChange={e => setInputQuery(e.target.value)}/>\n                <button type=\"submit\">Search City</button>\n            </form>\n            <h2>Displaying Weather for: {query}</h2>\n          </div>\n            { isLoading ? (\n                <Spinner />\n            ): (\n              <div css={container}>\n                <ul css={styles}>\n                {forcasts.map(data => (\n                    <li css={containerItem} key={data.dt}>\n                        <Card\n                            time={data.dt}\n                            temperature={data.main}\n                            prec={data.pop}\n                            desc={data.weather[0]}\n                        />\n                    </li>\n                    ))}\n                </ul>\n              </div>\n            )}\n        </div>\n    );\n}\n\nexport default FetchForcast;\n","/** @jsxImportSource @emotion/react */\nimport React from 'react';\nimport {useLocation} from 'react-router-dom';\nimport queryString from 'query-string';\nimport { css } from '@emotion/react';\nimport FetchForcast from './weather';\n\nconst styles = css `\n    background-color: lightblue;\n`;\n\nfunction useQueryString() {\n  return queryString.parse(useLocation().search);\n}\n\nfunction App() {\n  return (\n    <div css={styles}>\n      <FetchForcast query={useQueryString().q}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App/>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}